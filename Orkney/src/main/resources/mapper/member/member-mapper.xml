<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
  <select id="loginCheck" resultType="map" parameterType="string">
  	SELECT * FROM MEMBER WHERE MEMBER_ID=#{userId}
  </select>
  <insert id="insertSnsLogin" parameterType="map">
  	INSERT INTO SNS_LOGIN VALUES(#{id},#{name},#{profile},#{aToken},<if test="rToken != null">#{rToken}</if><if test="rToken == null">0</if>,'m'||#{mNo})
  </insert>
  <select id="searchGoogleId" parameterType="map" resultType="map">
  	SELECT * FROM SNS_LOGIN WHERE EMAIL=#{id}
  </select>
  <update id="updateGoogleId" parameterType="map">
  	UPDATE SNS_LOGIN SET ACCESS_TOKEN=#{aToken}
  	<if test="rToken != null">
  	,REFRESH_TOKEN=#{rToken}
  	</if>
  	WHERE EMAIL=#{id}
  </update>
  <insert id="insertSignup" parameterType="map">
  	INSERT INTO MEMBER VALUES('m'||m_NUM.NEXTVAL,#{email},#{password},#{f_name}||#{g_name},SYSDATE,TO_DATE(#{birthday},'YYYY-MM-DD'),#{phone},default,default,#{emailCh},
  	<if test="type == null">
  	 DEFAULT
  	</if>
  	<if test="type != null">
  	 #{type}
  	</if>
  	,default)
  <selectKey keyProperty="mNo" resultType="string" order="AFTER">
  	SELECT M_NUM.CURRVAL FROM DUAL
  </selectKey>
  </insert>
  <select id="searchUser" parameterType="string" resultType="map">
  	SELECT * FROM MEMBER WHERE MEMBER_ID=#{email}
  </select>
  <insert id="addAdr" parameterType="map">
 	INSERT INTO ADDR VALUES((SELECT MEMBER_NO FROM MEMBER WHERE MEMBER_ID=#{email}),#{adr},1,null,null,'addr'||addr_seq.nextval)
  </insert>
  <select id="chatRoomNo" parameterType="string" resultType="string">
  	SELECT CHAT_ROOM FROM CHATTING WHERE MEMBER_NO=#{no} GROUP BY CHAT_ROOM ORDER BY CHAT_ROOM
  </select>
  <select id="chatData" parameterType="string" resultType="map">
  	SELECT * FROM CHATTING WHERE CHAT_ROOM=#{chatRoomNo} ORDER BY CHAT_DATE
  </select>
  <select id="chatRoom" parameterType="map" resultType="map">
  	SELECT * FROM CHATTING WHERE MEMBER_NO=#{memberNo} AND CHAT_ROOM=#{roomNo} ORDER BY CHAT_DATE
  </select>
  <select id="chatAllData" parameterType="string" resultType="map">
  	SELECT * FROM CHATTING WHERE MEMBER_NO=#{id} order by chat_date desc
  </select>
  
  <insert id="chatDataSave" parameterType="map">
  	INSERT INTO CHATTING VALUES(c_num.nextval,#{sender},#{reciver},#{message},SYSDATE,
  	<if test="room == 'new'">
  	'r'||R_NUM.NEXTVAL
  	</if>
  	<if test="room != 'new'">
  	#{room}
  	</if>
  	,#{userNo})
  	<selectKey keyProperty="newNo" resultType="int" order="AFTER">
  		SELECT C_NUM.CURRVAL FROM DUAL
  	</selectKey>
  </insert>

  <select id="newRoomNo" resultType="string" parameterType="int">
  		SELECT CHAT_ROOM FROM CHATTING
  		WHERE CHAT_NO=#{newNo}
  </select>
  
  	<!-- 가입시 주소 가져오기 -->
  	<select id="getBasicAddress" parameterType="string" resultType="addr">
  		select * from addr where member_no=#{ no } and address_type = 1
  	</select>
  	
  	<!-- 추가된 배송지 리스트 가져오기 -->
  	<select id="addAddrList" parameterType="string" resultType="addr">
  		select * from addr where address_type=0 and member_no=#{mNo} order by address_no
  	</select>
	
	<select id="snsUserInfo" parameterType="string" resultType="map">
		SELECT * FROM MEMBER JOIN SNS_LOGIN USING(MEMBER_NO) WHERE MEMBER_ID=#{userId}
	</select>
	
	<update id="updateSnsId" parameterType="map">
		UPDATE SNS_LOGIN SET SNS_NAME=#{name},SNS_PROFILE=#{profile},ACCESS_TOKEN=#{aToken}
		<if test="rToken != null">
		,REFRESH_TOKEN=#{rToken}
		</if>
		WHERE SNS_ID=#{id}
	</update>
	
	<insert id="defaultWishList" parameterType="string">
		INSERT INTO WISHLIST VALUES('w'||wishlist_seq.nextval,#{mNo},'위시리스트')
	</insert>
	
	<select id="emailCh" parameterType="map" resultType="map">
		SELECT * FROM MEMBER WHERE MEMBER_ID=#{id}
		<if test="auth != null">
		AND EMAIL_AUTH='Y'
		</if>
	</select>
	
	<update id="transPwch" parameterType="map">
		UPDATE MEMBER SET MEMBER_PWD=#{pw} WHERE MEMBER_ID=#{id}
	</update>
  	
  	<!-- 이름, 생일 수정 -->
  	<update id="updateMemberPersonal" parameterType="map">
  		update member set MEMBER_NAME=#{name},BIRTHDAY=#{birth} where member_no=#{mNo}
  	</update>
  	
  	<!-- 연락처 수정 -->
  	<update id="updateMemberContact" parameterType="map">
  		update member set PHONE=#{phone} where member_no=#{mNo}
  	</update>
  	
  	<!-- 패스워드 수정 -->
  	<select id="updateMemberPassword" parameterType="map">
  		update member set MEMBER_PWD=#{newPwCk} where member_no=#{mNo}
  	</select>
  	
  	<!-- 기본 주소 수정 -->
  	<update id="updateMemberAddress" parameterType="map">
  		update addr set address=#{address} 
  		<if test="address_name == null">
  		where MEMBER_NO=#{mNo} and ADDRESS_TYPE='1'
  		</if>
  		<if test="address_name != null">
  		, ADDRESS_NAME=#{address_name}, ADDRESS_PHONE=#{address_phone} where ADDRESS_NO=#{address_no}
  		</if>
  	</update>
  	
  	<!-- 이메일 인증하기 -->
  	<update id="updateMemberAuth" parameterType="map">
  		update member set email_auth=#{auth}
  		where member_no=#{mNo}
  	</update>
  	
  	<select id="currentMemberInformation" parameterType="string" resultMap="memberResultMap">
  		select * from MEMBER join ADDR on (member.MEMBER_NO=addr.MEMBER_NO) where member.member_no=#{mNo}
  	</select>
  	
  	<!-- 주소넘으로 가져오기 -->
  	<select id="getAddress" parameterType="map" resultMap="addrResultMap">
  		select * from addr where member_no=#{mNo} and address_no=#{addrNo}
  	</select>
  	
  	<!-- 주소추가하기 -->
  	<insert id="insertAddr" parameterType="map">
  		insert into addr values(#{mNo}, #{address}, 0, #{name}, #{phone}, 'addr'||addr_seq.nextval)
  	</insert>
  	
  	<!-- 배송지 삭제하기 -->
  	<delete id="deleteAddress" parameterType="map">
  		DELETE FROM addr where member_no=#{mNo} and address_no=#{addrNo}
  	</delete>
  	
  	<!-- 탈퇴하기 -->
  	<delete id="deleteMember" parameterType="string">
  		delete from member where member_no=#{mNo}
  	</delete>
  	
  	<!-- 포인트 내역 가져오기 -->
  	<select id="pointList" parameterType="map" resultType="point">
  		select * 
		from point
		<if test="sd == null and type == null">
		where member_no = #{mNo} 
		</if>
		<if test='sd == null and type != null and type.equals("전체")'>
		where member_no = #{mNo}
		</if>
		<if test='sd == null and type != null and !type.equals("전체")'>
		where member_no = #{mNo} and point_type = #{type}
		</if>
		<if test='sd != null and type.equals("1")'>
		where point_date between to_date(#{sd}, 'yyyymmdd') and to_date(#{ed}, 'yyyymmdd')+0.99999 and member_no=#{mNo}
		</if>
		<if test='sd != null and !type.equals("1")'>
		where point_date between to_date(#{sd}, 'yyyymmdd') and to_date(#{ed}, 'yyyymmdd')+0.99999 and point_type = #{type} and member_no=#{mNo}
		</if>
		order by point_date desc
  	</select>
  	
  	<!-- 이메일 수신 체크 -->
  	<update id="emailCk" parameterType="map">
  		update member set EMAIL_CH=#{ck} where member_no=#{mNo}
  	</update>
  	
  	<!-- 수신 동의한 이메일 리스트 가져오기 -->
  	<select id="emailAgree" resultType="string">
  		select MEMBER_ID from member where EMAIL_CH='Y'
  	</select>
  	<!-- month로 포인트 조회하기 -->
<!--   	<select id="selectMonthPoint" parameterType="map" resultType="point"> -->
<!--   		select point_date from point where to_char(point_date,'YYYYMM')=#{month} and member_no=#{mNo} -->
<!--   	</select> -->
  	
  	
	<resultMap type="member" id="memberResultMap">
		<id column="MEMBER_NO" property="member_no"/>
		<result column="MEMBER_ID" property="member_id"/>
		<result column="MEMBER_PWD" property="member_pwd"/>
		<result column="MEMBER_NAME" property="member_name"/>
		<result column="ENROLL_DATE" property="enroll_date"/>
		<result column="BIRTHDAY" property="birthday"/>
		<result column="PHONE" property="phone"/>
		<result column="POINT" property="point"/>
		<result column="AUTHORITY" property="authority"/>
		<result column="EMAIL_CH" property="email_ch"/>
		<collection property="addr" resultMap="addrResultMap"/>
	</resultMap>  	
	
	<resultMap type="addr" id="addrResultMap">
		<result column="MEMBER_NO" property="member_no"/>
		<result column="ADDRESS" property="address"/>
		<result column="ADDRESS_TYPE" property="address_type"/>
		<result column="ADDRESS_NAME" property="address_name"/>
		<result column="ADDRESS_PHONE" property="address_phone"/>
		<result column="ADDRESS_NO" property="address_no"/>
	</resultMap>
	
	
	<!-- point update -->
	<update id="updatePoint" parameterType="map">
		UPDATE member SET point=#{point}  WHERE member_no=#{member_no}
	</update>
	
	<update id="emailAuth" parameterType="String">
		UPDATE MEMBER SET EMAIL_AUTH='Y' WHERE MEMBER_ID=#{id}
	</update>
	
</mapper>
